window = {
	gfxtype = windowgfx
	name = "trade_view"
	
	parentanchor = top|left
	size = { 1100 880 }
	position = { 5 120 }
	widgetanchor = top|left
	movable = no
	
	widget = {
		name = "background"
		using = Large_window_type
		size = { 100% 100% }
		alwaystransparent = yes
		position = { 0 0 }
		
		blockoverride "header"
		{
			text = "TRADE_MENU_HEADER"
			tooltip = "TRADE_MENU_HEADER_TT"
		}
	}
	
	square_close_button = {
		name = "close_button"
		position = { -12 12 }
		parentanchor = top|right
		shortcut = "close_window"
		onclick = "[TradeView.OnClose]"
		tooltip = "CLOSE"
	}
	
	left_arrow_button = {
		name = "previous_button"
		position = { 344 14 }
		parentanchor = top|left
		shortcut = "previous_window"
		onclick = "[TradeView.OnPrevious]"
		tooltip = "PREVIOUS_TRADE_VIEW"
	}
	
	
	
	########################
	# Trade Stats
	########################
	flowcontainer = {
		spacing = 6
		position = { 0 68 }
		parentanchor = top|hcenter
		widgetanchor = top|hcenter
	
		icon = {
			using = inset_frame
			size = { 140 32 }
			tooltip = "[TradeView.GetPlayer.GetModifierTooltip('global_commerce_modifier')]"
			
			icon = {
				position = { 4 3 }
				texture = "gfx/interface/icons/modifiers/global_commerce_modifier.dds"
				size = { 28 28 }
			}

			textbox = {
				position = { 18 -2 }
				autoresize = yes
				using = MarbleButtonFont
				text = "[TradeView.GetPlayer.GetModifierValue('global_commerce_modifier')]"
				parentanchor = center
				widgetanchor = center
				align = center
			}
		}
		
		icon = {
			using = inset_frame
			size = { 140 32 }
			tooltip = "[TradeView.GetPlayer.GetModifierTooltip('global_export_commerce_modifier')]"
			
			icon = {
				position = { 4 3 }
				texture = "gfx/interface/icons/modifiers/global_export_commerce_modifier.dds"
				size = { 28 28 }
			}

			textbox = {
				position = { 18 -2 }
				autoresize = yes
				using = MarbleButtonFont
				text = "[TradeView.GetPlayer.GetModifierValue('global_export_commerce_modifier')]"
				parentanchor = center
				widgetanchor = center
				align = center
			}
		}
		
		icon = {
			using = inset_frame
			size = { 140 32 }
			tooltip = "[TradeView.GetPlayer.GetModifierTooltip('global_import_commerce_modifier')]"
			
			icon = {
				position = { 4 3 }
				texture = "gfx/interface/icons/modifiers/global_import_commerce_modifier.dds"
				size = { 28 28 }
			}

			textbox = {
				position = { 18 -2 }
				autoresize = yes
				using = MarbleButtonFont
				text = "[TradeView.GetPlayer.GetModifierValue('global_import_commerce_modifier')]"
				parentanchor = center
				widgetanchor = center
				align = center
			}
		}

		icon = {
			using = inset_frame
			size = { 140 32 }
			tooltip = "[TradeView.GetPlayer.GetCapitalState.GetTradeRoutesMaximumTooltip('CAPITAL_IMPORT_ROUTES_HEADER')]"
			
			icon = {
				position = { 4 3 }
				texture = "gfx/interface/icons/modifiers/global_capital_trade_routes.dds"
				size = { 28 28 }
			}

			textbox = {
				position = { 18 -2 }
				autoresize = yes
				using = MarbleButtonFont
				text = "[TradeView.GetPlayer.GetCapitalState.GetMaxNumTradeRoutes]"
				parentanchor = center
				widgetanchor = center
				align = center
			}
		}

		icon = {
			using = inset_frame
			size = { 140 32 }
			tooltip = "[TradeView.GetPlayer.GetModifierTooltip('global_state_trade_routes')]"
			
			icon = {
				position = { 4 3 }
				texture = "gfx/interface/icons/modifiers/global_state_trade_routes.dds"
				size = { 28 28 }
			}

			textbox = {
				position = { 18 -2 }
				autoresize = yes
				using = MarbleButtonFont
				text = "[TradeView.GetPlayer.GetModifierValue('global_state_trade_routes')]"
				parentanchor = center
				widgetanchor = center
				align = center
			}
		}
	}
	
	button = {
		texture = "gfx/interface/buttons/manual_trade.dds"
		frame = "[TradeView.GetAutoFrame]"
		onclick = "[TradeView.ToggleAutoAcceptTrade]"
		clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_sub_tab"
		oversound = "event:/SFX/UI/Generic/sfx_ui_generic_mouse_over"
		framesize = { 49 49 }
		size = { 44 44 }
		position = { -102 62 }
		parentanchor = top|right

		tooltip = "[SelectLocalization(TradeView.GetPlayer.AutoAcceptTrade,'AUTO_TRADE_ACCEPTED','AUTO_TRADE_DECLINED')]"
	}
	
	button = {
		texture = "gfx/interface/buttons/surplus_trade.dds"
		frame = "[TradeView.GetSurplusFrame]"
		onclick = "[TradeView.ToggleCapitalSurplus]"
		clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_sub_tab"
		oversound = "event:/SFX/UI/Generic/sfx_ui_generic_mouse_over"
		framesize = { 49 49 }
		size = { 44 44 }
		position = { -52 62 }
		parentanchor = top|right

		tooltip = "[SelectLocalization(TradeView.GetPlayer.NeverGiveUpTradeSurplus,'BLOCK_TRADE_SURPLUS','ALLOW_TRADE_SURPLUS')]"
	}

	flowcontainer = {
		direction = vertical
		position = { 42 100 }
		
		####################################
		# Capital Surpluses
		###################################
		widget = {
			size = { 1010 100 }
			
			DefaultHeaderBackground = {
				position = { 0 0 }
				size = { 1010 46 }
				
				blockoverride "text"
				{
					text = "TRADE_VIEW_CAPITAL"
					tooltip = "TRADE_VIEW_CAPITAL_TT"
				}
			}
			
			overlappingitembox = {
				name = "capital_surplus_grid"
				position = { 0 45 }
				size = { 1004 60 }
				
				datamodel = "[TradeView.GetCapitalSurplus]"
				
				item = {
					widget = {
						tooltip = "[CapitalSurplus.GetTooltip]"
						alwaystransparent = no
						filter_mouse = all
						size = { 60 60 }
						
						icon = {
							name = "Slot"
							texture = "gfx/interface/unit_view/unit_card_square.dds"
							position = { 0 0 }
						}
						
						icon = {
							size = { 50 50 }
							texture = "[GetTradeGoodsIcon(CapitalSurplus.GetTradeGoods)]"
							position = { 9 6 }
						}
					}
				}
			}
		}
		
		widget = {
			name = "Spacing 2"
			size = { 8 18 }
		}
		
		widget = {
			size = { 1008 540 }
			DefaultHeaderBackground = {
				position = { 0 0 }
				size = { 1010 46 }
				
				blockoverride "text"
				{
					text = "TRADE_VIEW_CAPITAL"
					tooltip = "TRADE_VIEW_CAPITAL_TT"
				}
			}
			flowcontainer = {
				position = { 8 46 }
				CharacterFilterButton = {
					onclick = "[TradeView.Filter('export')]"
					down = "[TradeView.IsFiltered('export')]"
					
					blockoverride "button_values"
					{
						name = "filter_export"
					}
					
					CharacterFilterButtonIcon = {
						visible = "[TradeView.IsFilterYes('export')]"
						texture = "gfx/interface/icons/font_icons/font_icon_tick.dds"
					}
					
					CharacterFilterButtonIcon = {
						visible = "[TradeView.IsFilterNo('export')]"
						texture = "gfx/interface/icons/font_icons/font_icon_cross.dds"
					}
				}
				
				CharacterFiltericon = {
					blockoverride "icon_values"
					{
						tooltip = "TRADE_VIEW_FILTER_BY_EXPORTS"
					}
					
					blockoverride "textbox_values"
					{
						text = "TRADE_VIEW_FILTER_BY_EXPORTS"
					}
				}
				
				CharacterFilterButton = {
					onclick = "[TradeView.Filter('import')]"
					down = "[TradeView.IsFiltered('import')]"
					
					blockoverride "button_values"
					{
						name = "filter_import"
					}
					
					CharacterFilterButtonIcon = {
						visible = "[TradeView.IsFilterYes('import')]"
						texture = "gfx/interface/icons/font_icons/font_icon_tick.dds"
					}
					
					CharacterFilterButtonIcon = {
						visible = "[TradeView.IsFilterNo('import')]"
						texture = "gfx/interface/icons/font_icons/font_icon_cross.dds"
					}
				}
				
				CharacterFiltericon = {
					blockoverride "icon_values"
					{
						tooltip = "TRADE_VIEW_FILTER_BY_IMPORTS"
					}
					
					blockoverride "textbox_values"
					{
						text = "TRADE_VIEW_FILTER_BY_IMPORTS"
					}
				}
				
				CharacterFilterButton = {
					onclick = "[TradeView.Filter('domestic')]"
					down = "[TradeView.IsFiltered('domestic')]"
					
					blockoverride "button_values"
					{
						name = "filter_domestic"
					}
					
					CharacterFilterButtonIcon = {
						visible = "[TradeView.IsFilterYes('domestic')]"
						texture = "gfx/interface/icons/font_icons/font_icon_tick.dds"
					}
					
					CharacterFilterButtonIcon = {
						visible = "[TradeView.IsFilterNo('domestic')]"
						texture = "gfx/interface/icons/font_icons/font_icon_cross.dds"
					}
				}
				
				CharacterFiltericon = {
					blockoverride "icon_values"
					{
						tooltip = "TRADE_VIEW_FILTER_BY_DOMESTIC"
					}
					
					blockoverride "textbox_values"
					{
						text = "TRADE_VIEW_FILTER_BY_DOMESTIC"
					}
				}
				
			}
			
			container = {
				position = { 0 88 }
				
				flowcontainer = {
					position = {  8 0 }
					spacing = 1
					
					sort_button = {
						size = { 40 32 }
						onclick = "[TradeView.SortRoutes('from_country')]"
						down = "[TradeView.IsRoutesSorted('from_country')]"
						using = MarbleButtonFontS
						
						tooltip = TRADE_SORT_BY_ORIGIN_COUNTRY
						
						icon = {
							texture = "gfx/interface/diplomacy/country_rank.dds"
							position = { 0 2 }
							size = { 26 26 }
							framesize = { 54 54 }
							parentanchor = top|hcenter
							frame = 5
						}
					}
					
					sort_button = {
						text = "FROM_STATE"
						tooltip = TRADE_SORT_BY_ORIGIN
						size = { 236 32 }
						onclick = "[TradeView.SortRoutes('from_state')]"
						down = "[TradeView.IsRoutesSorted('from_state')]"
						using = MarbleButtonFontS
						
						blockoverride "text_position"
						{
							position = { 0 -9 }
						}
					}
					
					widget = {
						size = { 4 4 }
					}
					
					sort_button = {
						size = { 40 32 }
						onclick = "[TradeView.SortRoutes('to_country')]"
						down = "[TradeView.IsRoutesSorted('to_country')]"
						tooltip = TRADE_SORT_BY_DESTINATION_COUNTRY
						using = MarbleButtonFontS
						icon = {
							texture = "gfx/interface/diplomacy/country_rank.dds"
							position = { 0 2 }
							size = { 26 26 }
							framesize = { 54 54 }
							parentanchor = top|hcenter
							frame = 5
						}					
					}
					
					sort_button = {
						text = "TO_STATE"
						tooltip = TRADE_SORT_BY_DESTINATION
						size = { 236 32 }
						onclick = "[TradeView.SortRoutes('to_state')]"
						down = "[TradeView.IsRoutesSorted('to_state')]"
						using = MarbleButtonFontS
						
						blockoverride "text_position"
						{
							position = { 0 -9 }
						}
					}

					widget = {
						size = { 4 4 }
					}					

					sort_button = {
						text = "TR_GOODS"
						size = { 204 32 }
						onclick = "[TradeView.SortRoutes('goods')]"
						down = "[TradeView.IsRoutesSorted('goods')]"
						
						tooltip = TRADE_SORT_BY_GOODS
						using = MarbleButtonFontS
						
						blockoverride "text_position"
						{
							position = { 0 -9 }
						}
					}
					
					widget = {
						size = { 6 4 }
					}					
					
					sort_button = {
						text = "INCOME"
						
						tooltip = TRADE_SORT_BY_INCOME
						size = { 146 32 }
						onclick = "[TradeView.SortRoutes('income')]"
						down = "[TradeView.IsRoutesSorted('income')]"
						using = MarbleButtonFontS
						
						blockoverride "text_position"
						{
							position = { 0 -9 }
						}
					}		
				}
				
				########################
				# Routes
				########################
				
				icon = {
					position = { 5 38 }
					size = { 994 324 }
					texture = "gfx/interface/tiles/list_slot_corner_tiles.dds"
					spriteType = Corneredtiled
					spriteborder = { 10 10 }
					
					scrollarea = {
						position = { 8 4 }
						size = { 980 318 }
						scrollbarpolicy_horizontal = always_off
						
						scrollbar_vertical = {
							using = MarbleScrollBar
							blockoverride "ScrollBar_offset"
							{
								size = { 0 4 }
							}
						}
						
						scrollwidget = {
							dynamicgridbox = {
								name = "imports_grid"
								
								datamodel = "[TradeView.GetCurrentTradeRoutes]"
								item = {
									
									widget = {
										size = { 952 36 }
										
										flowcontainer = {
											spacing = 4
											
											widget = {
												size = { 36 40 }	
												
												country_flag = {
													datacontext = "[ActiveTradeRoute.GetFrom.GetCountry]"
													tooltip = "COUNTRY_SHORTHAND_INFO"
													position = { 0 0 }
													size = { 40 40 }
													
													blockoverride "flag"
													{
														texture = "[ActiveTradeRoute.GetFrom.GetCountry.AccessCoatOfArms.GetTexture('(int32)56','(int32)56')]"
														frame = "[ActiveTradeRoute.GetFrom.GetCountry.AccessCoatOfArms.GetFrame('(int32)56','(int32)56')]"
														framesize = { 56 56 }
													}
													blockoverride "size"
													{
														size = { 34 34 }
													}
													
													blockoverride "click"
													{
														onclick = "[OpenDiplomacy(ActiveTradeRoute.GetFrom.GetCountry)]"
													}
													
													blockoverride "hover_leave"
													{
														onmousehierarchyleave = "[ClearHighlightColors]"
													}
												}
											}



											widget = {
												size = { 230 37 }
												
												icon = {
													position = { 0 3 }
													size = { 196 28 }
													texture = "gfx/interface/tiles/list_slot_corner_tiles.dds"
													spriteType = Corneredtiled
													spriteborder = { 28 20 }
													
													container = {
														onmousehierarchyenter = "[SetHighlightArea( ActiveTradeRoute.GetFrom.GetArea )]"
														textbox = {
															using = MarbleButtonFont
															text = "[ActiveTradeRoute.GetFrom.GetShortName]"
															size = { 160 28 }
															align = left
															alwaystransparent = no
															position = { 8 -2 }
															elide = right
														}
													}
												}
												
												button = {
													name = "zoom_to_FROM_button"
													onmousehierarchyenter = "[SetHighlightArea( ActiveTradeRoute.GetFrom.GetArea )]"
													texture = "gfx/interface/minimap/minimap_find_province.dds"
													framesize = { 45 37 }
													#parentanchor = right|top
													scale = 0.8
													#size = { 36 28 }
													position = { 196 2 } 
													datacontext = [ActiveTradeRoute.GetFrom]
													tooltip = "zoom_to_getfrom" 
													onclick = "[OnClickOnState(ActiveTradeRoute.GetFrom)]" 
												}
											}
											
											widget = {
												size = { 4 4 }
											}
											
											widget = {
												size = { 36 40 }
											
												country_flag = {
													datacontext = "[ActiveTradeRoute.GetTo.GetCountry]"
													tooltip = "COUNTRY_SHORTHAND_INFO"
													position = { 0 0 }
													size = { 40 40 }
													
													blockoverride "flag"
													{
														texture = "[ActiveTradeRoute.GetTo.GetCountry.AccessCoatOfArms.GetTexture('(int32)56','(int32)56')]"
														frame = "[ActiveTradeRoute.GetTo.GetCountry.AccessCoatOfArms.GetFrame('(int32)56','(int32)56')]"
														framesize = { 56 56 }
													}
													blockoverride "size"
													{
														size = { 34 34 }
													}
													
													blockoverride "click"
													{
														onclick = "[OpenDiplomacy(ActiveTradeRoute.GetTo.GetCountry)]"
													}
													
													blockoverride "hover_leave"
													{
														onmousehierarchyleave = "[ClearHighlightColors]"
													}
												}
											}
											
											
											
											widget = {
												size = { 230 37 }
												
												icon = {
													position = { 0 3 }
													size = { 196 28 }
													texture = "gfx/interface/tiles/list_slot_corner_tiles.dds"
													spriteType = Corneredtiled
													spriteborder = { 28 20 }
													
													container = {
														onmousehierarchyenter = "[SetHighlightArea( ActiveTradeRoute.GetTo.GetArea )]"
														#onmousehierarchyleave = "[ClearHighlightColors]" 
														textbox = {
															using = MarbleButtonFont
															#position = { 410 4 }
															text = "[ActiveTradeRoute.GetTo.GetShortName]"
															size = { 160 28 }
															alwaystransparent = no
															position = { 8 -2 }
															elide = right
														}
													}
												}
												
												button = {
													name = "zoom_to_TO_button"
													onmousehierarchyenter = "[SetHighlightArea( ActiveTradeRoute.GetTo.GetArea )]"
													texture = "gfx/interface/minimap/minimap_find_province.dds"
													framesize = { 45 37 }
													scale = 0.8
													#size = { 36 28 }
													position = { 196 2 } 
													datacontext = [ActiveTradeRoute.GetTo]
													tooltip = "zoom_to_getto" 
													onclick = "[OnClickOnState(ActiveTradeRoute.GetTo)]" 
													#parentanchor = right
												}												
											}
											
											widget = {
												size = { 4 4 }
											}
											
											widget = {
												size = { 200 28 }
												
												icon = {
													position = { 0 3 }
													size = { 200 28 }
													texture = "gfx/interface/tiles/list_slot_corner_tiles.dds"
													spriteType = Corneredtiled
													spriteborder = { 28 20 }
	
													container = {
														tooltip = "[ActiveTradeRoute.GetGoods.GetTooltip]"
														icon = {
															position = { 4 -2 }
															size = { 30 30 }
															texture = "[GetTradeGoodsIcon(ActiveTradeRoute.GetGoods)]"
														}
														textbox = {
															position = { 40 -3 }
															using = MarbleButtonFont
															text =  "[ActiveTradeRoute.GetGoods.GetName]"
															size = { 100% 28 }
															
														}
													}
												}
											}
											
											widget = {
												size = { 4 4 }
											}											
											
											widget = {
												size = { 140 28 }
												
												icon = {
													position = { 0 3 }
													size = { 140 28 }
													texture = "gfx/interface/tiles/list_slot_corner_tiles.dds"
													spriteType = Corneredtiled
													spriteborder = { 28 20 }
													
													textbox = {
														tooltip = "[ActiveTradeRoute.GetIncomeTooltip]"
														using = MarbleButtonFont
														text = "[ActiveTradeRoute.GetIncome|2]@gold!"
														parentanchor = hcenter|vcenter
														widgetanchor = hcenter|vcenter
														align = center
														size = { 100% 28 }
														position = { 0 -4 }
													}
												}
											}
											
											widget = {
												size = { 2 4 }
											}
											
											widget = {
												size = { 36 36 }
												
												cancel_button = {
													position = { 0 -1 }
													size = { 36 36 }
													#using = MarbleButtonFont
													#text = "CANCEL_TRADE_ROUTE_BUTTON"
													onmousehierarchyenter = "[SetHighlightArea( ActiveTradeRoute.GetTo.GetArea )]"
													onclick = "[ActiveTradeRoute.OnClick]"
													tooltip = "[ActiveTradeRoute.GetTooltip]"
													
													#buttonText = {
													#	textbox = {
													#		parentanchor = bottom|hcenter
													#		using = MarbleButtonFontS
													#		autoresize = yes
													#		position = { 0 -8 }
													#	}
													#}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
	
	widget = {
		size = { 980 200 }
		position = { 47 666 }
		
		DefaultHeaderBackground = {
			position = { 0 0 }
			size = { 1006 46 }
			
			blockoverride "text"
			{
				text = ""
				#tooltip = "TRADE_VIEW_REQUEST_DENY_TT"
			}
			flowcontainer = {
				position = { 10 8 }
				textbox = {
					using = BlackMarbleFont
					autoresize = yes
					text = "TRADE_VIEW_REQUEST_DENY"
					tooltip = "TRADE_VIEW_REQUEST_DENY_TT"
				}
				container = {
					textbox = {
						position = { 0 -2 }
						text = "@trigger_yes!"
						using = BlackMarbleFont
						parentanchor = top
						autoresize = yes
						tooltip = "THESE_ARE_NOT_ALLOWED_TT"
					}
				}
			}
			
			flowcontainer = {
				position = { 420 8 }
				textbox = {
					text = TRADE_VIEW_REQUEST_DENIED
					using = BlackMarbleFont
					
					autoresize = yes
					tooltip = "THESE_ARE_NOT_ALLOWED_TT"
				}
				container = {
					textbox = {
						position = { 0 -2 }
						text = "@trigger_no!"
						using = BlackMarbleFont
						parentanchor = top
						autoresize = yes
						tooltip = "THESE_ARE_NOT_ALLOWED_TT"
					}
				}
			}
		}
		
		dynamicgridbox = {
			name = "capital_surplus_grid"
			position = { 4 41 }
			size = { 1004 200 }
			maxhorizontalslots = 12
			datamodel_wrap = 4
			
			datamodel = "[TradeView.GetAvailableTradeGoods]"
			
			item = {
				button = {
					alwaystransparent = no
					filter_mouse = all
					size = { 46 38 }
					
					icon = {
						name = "Slot_uncolored"
						texture = "gfx/interface/unit_view/unit_card_square.dds"
						size = { 42 42 }
						position = { 0 0 }
						state = {
							name = cannot_has
							
							trigger_when = "[TradeGoodsGlue.IsDenied]"
							
							animation = {
								alpha = 0.5
							}
							
						}
						
						state = {
							name = can_has
							
							trigger_when = "[Not( TradeGoodsGlue.IsDenied )]"
							
							animation = {
								alpha = 1
							}
							
						}
						
					}
					
					icon = {
						size = { 34 34 }
						texture = "[GetTradeGoodsIcon(TradeGoodsGlue.GetTradeGood)]"
						position = { -1 2 }
						parentanchor = vcenter|hcenter
						
						state = {
							name = cannot_has
							
							trigger_when = "[TradeGoodsGlue.IsDenied]"
							
							animation = {
								alpha = 0.5
							}
							
						}
						
						state = {
							name = can_has
							
							trigger_when = "[Not( TradeGoodsGlue.IsDenied )]"
							
							animation = {
								alpha = 1
							}
							
						}
						
					}
					onclick = "[TradeGoodsGlue.ToggleDenyTradeGood]"
					tooltip = "TRADEGOOD_DENY_INFO"
				} 
			}
		}
		
		icon = {
			name = "vertical_divider_1"
			texture = "gfx/interface/tiles/vertical_divider.dds"
			spriteType = corneredtiled
			spriteborder = { 0 10 }
			size = { 6 152 }
			position = { 415 41 }
		}
		
		dynamicgridbox = {
			name = "other_grid"
			position = { 421 41 }
			size = { 1004 200 }
			maxhorizontalslots = 12
			datamodel_wrap = 4
			
			datamodel = "[TradeView.GetDeniedTradeGoods]"
			
			item = {
				button = {
					alwaystransparent = no
					filter_mouse = all
					size = { 46 38 }
					
					icon = {
						name = "Slot_uncolored"
						texture = "gfx/interface/unit_view/unit_card_square.dds"
						size = { 42 42 }
						position = { 0 0 }
						#state = {
						#	name = cannot_has
						#	
						#	trigger_when = "[TradeGoodsGlue.IsDenied]"
						#	
						#	animation = {
						#		alpha = 0.5
						#	}
						#	
						#}
						
						#state = {
						#	name = can_has
						#	
						#	trigger_when = "[Not( TradeGoodsGlue.IsDenied )]"
						#	
						#	animation = {
						#		alpha = 1
						#	}
						#	
						#}
						
					}
					
					icon = {
						size = { 34 34 }
						texture = "[GetTradeGoodsIcon(TradeGoodsGlue.GetTradeGood)]"
						position = { -1 2 }
						parentanchor = vcenter|hcenter
						
						#state = {
						#	name = cannot_has
						#	
						#	trigger_when = "[TradeGoodsGlue.IsDenied]"
						#	
						#	animation = {
						#		alpha = 0.5
						#	}
						#	
						#}
						#
						#state = {
						#	name = can_has
						#	
						#	trigger_when = "[Not( TradeGoodsGlue.IsDenied )]"
						#	
						#	animation = {
						#		alpha = 1
						#	}
						#	
						#}
						
					}
					onclick = "[TradeGoodsGlue.ToggleDenyTradeGood]"
					tooltip = "TRADEGOOD_DENY_INFO"
				} 
			}
		}
	}
	
}

