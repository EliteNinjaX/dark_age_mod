types economy_types {
	type policy_button = container {
		tooltip = "[EconomicPolicyGlue.GetTooltip]"

		sort_button_policy = {
			block "transparency" {}

			size = { 38 40 }
			
			enabled = "[EconomicPolicyGlue.CanClick]"
			down = "[EconomicPolicyGlue.IsSelected]"
			onclick = "[ClickHighlight(EconomicPolicyGlue.GetHighlightKey)]"
			onclick = "[EconomicPolicyGlue.OnClick]"
			clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_select"
			oversound = "event:/SFX/UI/Generic/sfx_ui_generic_mouse_over"
			
			icon = {
				name = "icon"
				texture = "gfx/interface/economy/economy_policy_icon.dds"
				framesize = { 50 50 }
				size = { 28 28 }
				position = { 6 5 }
				frame = "[EconomicPolicyGlue.GetIconFrame]"
			}

			icon = {
				using = highlight_button_circle_45
				visible = "[ShouldHighlight(EconomicPolicyGlue.GetHighlightKey)]"
			}
		}
		
		widget = {
			position = { 0 40 }
			size = { 8 8 }
		}
	}
}

window = {
	gfxtype = windowgfx
	name = "economy_view"
	parentanchor = top|left
	size = { 700 814 }
	position = { 5 120 }
	widgetanchor = top|left
	movable = no

	using = advice_trigger_highlights

	widget = {
		name = "background"
		using = Large_window_type
		size = { 100% 100% }
		alwaystransparent = yes
		
		blockoverride "header"
		{
			text = "ECONOMY_MENU_HEADER"
			tooltip = "ECONOMY_MENU_HEADER_TT"
		}
	}
	
	square_close_button = {
		name = "close_button"
		position = { -12 12 }
		parentanchor = top|right
		shortcut = "close_window"
		onclick = "[EconomyView.OnClose]"
		tooltip = "CLOSE"
	}
	
	left_arrow_button = {
		name = "previous_button"
		position = { 144 14 }
		parentanchor = top|left
		shortcut = "previous_window"
		onclick = "[EconomyView.OnPrevious]"
		tooltip = "PREVIOUS_ECONOMY_VIEW"
	}
	
	container = {
		name = "Balance"
		position = { 52 67 }
		
		tooltip = "BALANCE_TOOLTIP"
		
		icon = {
			name = "frame"
			using = inset_frame
			size = { 593 50 }
		}
		
		textbox = {
			parentanchor = center
			autoresize = yes
			using = MarbleButtonFontL
			text = "[EconomyView.GetBalance]@gold!"
			align = hcenter|nobaseline
		}
	}
	container = {
		position = { 0 117 }

		DefaultHeaderBackground = {
			position = { 47 0 }
			size = { 300 46 }
			
			blockoverride "text"
			{
				text = "INCOMES_HEADER"
				tooltip = "INCOMES_HEADER_TT"
			}

			textbox = {
				position = { -9 -3 }
				parentanchor = vcenter|right
				widgetanchor = vcenter|right
				autoresize = yes
				using = MarbleButtonFont
				text = "#g +#![EconomyView.GetTotalIncome|+2]@gold!"
			}
		}
		dynamicgridbox = {
			name = "income_grid"
			position = { 52 47 }
			size = { 180 200 }
			datamodel = "[EconomyView.GetIncome]"
			
			item = {
				container = {
					ignoreinvisible = yes
					alpha = "[TransparentIfTrue( And( EqualTo_int32( EconomyView.GetPlayer.GetNumOfSubjects, '(int32)0' ), IncomeItem.IsTribute ) )]"
					
					container = {
						tooltip = "[IncomeItem.GetTooltip]"
						icon = {
							name = "frame"
							texture = "gfx/interface/tiles/list_slot_corner_tiles.dds"
							spriteType = Corneredtiled
							spriteborder = { 12 12 }
							size = { 290 30 }
						}
						
						textbox = {
							position = { 7 1 }
							autoresize = yes
							using = MarbleButtonFont
							text = "[IncomeItem.GetName]"
						}
						
						textbox = {
							position = { 284 12 }
							autoresize = no
							using = MarbleButtonFont
							text = "[IncomeItem.GetValue|2]@gold!"
							
							align = right
						}
					}
					
					icon = {
						position = { 170 32 }
						size = { 120 36 }
						texture = "gfx/interface/tiles/list_slot_corner_tiles.dds"
						spriteType = Corneredtiled
						spriteborder = { 28 20 }
						tooltip = "[IncomeItem.GetModifierTooltip]"
						
						icon = {
							name = "icon"
							position = { 6 3 }
							size = { 30 30 }
							texture = "[IncomeItem.GetModifierIcon]"
						}
						
						textbox = {
							name = "value"
							size = { 40 20 }
							position = { -4 5 }
							multiline = no
							using = MarbleButtonFontM
							text = "[IncomeItem.GetModifierValue]"
							widgetanchor = top|right
							parentanchor = top|right
							align = right
						}
					}
					
					dynamicgridbox = {
						position = { 0 32 }
						datamodel = "[IncomeItem.GetPolicies]"
						flipdirection = yes
						item = {
							policy_button = {
								blockoverride "transparency" {
									alpha = "[TransparentIfTrue( And( EqualTo_int32( EconomyView.GetPlayer.GetNumOfSubjects, '(int32)0' ), IncomeItem.IsTribute ) )]"
								}
							}
						}
					}
				}
			}
		}
		DefaultHeaderBackground = {
				position = { 350 0 }
			size = { 300 46 }
			
			blockoverride "text"
			{
				text = "EXPENSES_HEADER"
				tooltip = "EXPENSES_HEADER_TT"
			}

			textbox = {
				position = { -9 -3 }
				parentanchor = vcenter|right
				widgetanchor = vcenter|right
				autoresize = yes
				using = MarbleButtonFont
				text = "#r -#![EconomyView.GetTotalExpense|-2]@gold!"
			}
		}
		dynamicgridbox = {
			name = "expense_grid"
			position = { 354 47 }
			size = { 180 200 }
			datamodel = "[EconomyView.GetExpense]"
			
			item = {
				container = {
					ignoreinvisible = yes
					alpha = "[TransparentIfZero(ExpenseItem.GetValue)]"

					container = {
						tooltip = "[ExpenseItem.GetTooltip]"
						icon = {
							name = "frame"
							texture = "gfx/interface/tiles/list_slot_corner_tiles.dds"
							spriteType = Corneredtiled
							spriteborder = { 12 12 }
							size = { 290 30 }
						}
						textbox = {
							position = { 7 1 }
							autoresize = yes
							using = MarbleButtonFont
							text = "[ExpenseItem.GetName]"
						
						}
						
						textbox = {
							position = { 284 12 }
							
							using = MarbleButtonFont
							text = "[ExpenseItem.GetValue|2]@gold!"
							align = right
						}
					}
					
					icon = {
						position = { 170 32 }
						size = { 120 36 }
						texture = "gfx/interface/tiles/list_slot_corner_tiles.dds"
						spriteType = Corneredtiled
						spriteborder = { 28 20 }
						visible = "[ExpenseItem.HasModifier]"
						tooltip = "[ExpenseItem.GetModifierTooltip]"
						
						icon = {
							name = "icon"
							position = { 6 3 }
							size = { 30 30 }
							texture = "[ExpenseItem.GetModifierIcon]"
						}
						
						textbox = {
							name = "value"
							size = { 40 20 }
							position = { -4 5 }
							multiline = no
							using = MarbleButtonFontM
							text = "[ExpenseItem.GetModifierValue]"
							widgetanchor = top|right
							parentanchor = top|right
							align = right
						}
					}

					dynamicgridbox = {
						position = { 0 32 }
						datamodel = "[ExpenseItem.GetPolicies]"
						flipdirection = yes
						
						item = {
							policy_button = {
								blockoverride "transparency" {
									alpha = "[TransparentIfZero(ExpenseItem.GetValue)]"
								}
							}
						}
					}
				
				}
			}
		}
		icon = {
			size = { 590 260 }
			position = { 52 402 }
			texture = "gfx/interface/tiles/list_slot_corner_tiles.dds"
			spriteType = Corneredtiled
			spriteborder = { 10 10 }
			
			container = {
				visible = "[EconomyView.HasDeficit]"
				tooltip = "[EconomyView.GetDeficitTooltip]"
				parentanchor = center
				position = { 0 -10 }

				icon = {
					position = { 0 2 }
					using = icon_bankruptcy
					widgetanchor = top|hcenter
					parentanchor = top|hcenter
				}
				
				textbox = {
					position = { 0 52 }
					size = { 290 120 }
					elide = right
					using = MarbleButtonFont
					text = "[EconomyView.GetDeficitEffect]"
				}
			}
			container = {
				visible = "[Not(EconomyView.HasDeficit)]"
				tooltip = "[EconomyView.GetNoDeficitTooltip]"
				parentanchor = center
				
				icon = {
					position = { 0 0 }
					using = icon_treasury
					widgetanchor = top|hcenter
					parentanchor = top|hcenter
				}

				textbox = {
					position = { 0 2 }
					size = { 290 120 }
					using = MarbleButtonFont
					align = center
					text = "NO_DEFICIT_TEXT"
				}
			}
		}
		
	}
}
