template unit_action_item
{
	button = {
		texture = "gfx/interface/buttons/button_square_40.dds"
		onclick = "[UnitActionItem.Activate]"
		enabled = "[UnitActionItem.CanActivate]"
		tooltip = "[UnitActionItem.GetTooltip]"
		shortcut = "[UnitActionItem.GetShortcut]"
		oversound = "event:/SFX/UI/Generic/sfx_ui_generic_mouse_over"
		clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_sub_tab"
		
		
		
		icon = {
			position = { -0 0 }
			size = { 40 40 }
			texture = "[UnitActionItem.GetTexture]"
		}
	}
}

template unit_action_item_round
{
	button = {
		gfxtype = togglepushbuttongfx
		
		
		texture = "gfx/interface/buttons/button_circle_40_toggle.dds"
		onclick = "[UnitActionItem.Activate]"
		enabled = "[UnitActionItem.CanActivate]"
		tooltip = "[UnitActionItem.GetTooltip]"
		down = "[UnitActionItem.IsActive]"
		shortcut = "[UnitActionItem.GetShortcut]"
		oversound = "event:/SFX/UI/Generic/sfx_ui_generic_mouse_over"
		clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_click"
		
		
		shaderfile = "gfx/FX/pdxgui_pushbutton.shader"
		
		framesize = { 40 40 }
		upframe = 1
		uphoverframe = 1
		uppressedframe = 1
		downframe = 2
		downhoverframe = 2
		disableframe = 1
		
		icon = {
			position = { -0 0 }
			size = { 40 40 }
			texture = "[UnitActionItem.GetTexture]"
		}
	}
}

template unit_action_item_diamond
{
	button = {
		texture = "gfx/interface/buttons/button_diamond_40.dds"
		onclick = "[UnitActionItem.Activate]"
		enabled = "[UnitActionItem.CanActivate]"
		tooltip = "[UnitActionItem.GetTooltip]"
		shortcut = "[UnitActionItem.GetShortcut]"
		oversound = "event:/SFX/UI/Generic/sfx_ui_generic_mouse_over"
		clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_click"
		
		icon = {
			position = { 5 5 }
			size = { 30 30 }
			texture = "[UnitActionItem.GetTexture]"
		}
	}
}



window = {
	gfxtype = windowgfx
	name = "single_unit_window"
	parentanchor = top|left
	size = { 542 755 }
	position = { 0 120 }
	widgetanchor = top|left
	movable = yes

	using = advice_trigger_highlights_no_delay

	widget = {
		name = "background"
		using = small_window_type
		size = { 100% 100% }
		alwaystransparent = no
	}
	
	icon = {
		texture = "gfx/interface/tiles/small_window_title_header_corners.dds"
		spriteType = Corneredtiled
		size = { 542 51 }
		spriteborder = { 16 16 }
		shaderfile = "gfx/FX/pdxgui_default.shader"
	}
	
	square_close_button = {
		name = "close_button"
		position = { -4 5 }
		parentanchor = top|right
		shortcut = "close_window"
		onclick = "[SingleUnitWindow.OnClose]"
		tooltip = "CLOSE"
	}
	
	container = {
		container = {
			portrait_button = {
				using = portrait_60_no_pop
				name = "portrait"
				position = { 12 54 }
				parentanchor = top|left
				datacontext = "[SingleUnitWindow.GetSelectedUnit.GetCommander]"
				tooltip = "[SingleUnitWindow.GetCommanderTooltip]"
			
			}
			
			button = {
				position = { 56 136 }
				size = { 38 38 }
				onclick = "[ClickHighlight('btn_single_unit_replace_leader')]"
				onclick = "[SingleUnitWindow.OnCommanderClick]"
				enabled = "[SingleUnitWindow.CanReplaceLeader]"
				tooltip = "[SingleUnitWindow.GetReplaceLeaderInfo]"
				texture = "gfx/interface/buttons/button_round_40.dds"
				icon = {
					texture = "gfx/interface/icons/shared_icons/change.dds"
					parentanchor = center
					size = { 25 25 }
					position = { 1 0 }
				}
				clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_sub_tab"
				oversound = "event:/SFX/UI/Generic/sfx_ui_generic_mouse_over"

				icon = {
					using = highlight_button_circle_45
					visible = "[ShouldHighlight('btn_single_unit_replace_leader')]"
				}
			}
			
			country_flag = {
				position = { 13 0 }
				tooltip = "[SingleUnitWindow.GetCountryTooltip]"
				
				blockoverride "flag"
				{
					texture = "[SingleUnitWindow.GetSelectedUnit.GetCountry.AccessCoatOfArms.GetTexture('(int32)56','(int32)56')]"
					frame = "[SingleUnitWindow.GetSelectedUnit.GetCountry.AccessCoatOfArms.GetFrame('(int32)56','(int32)56')]"
					framesize = { 56 56 }
				}
				
				blockoverride "size"
				{
					size = { 56 56 }
				}
				
				blockoverride "click"
				{
					onclick = "[OpenDiplomacy(SingleUnitWindow.GetSelectedUnit.GetCountry)]"
				}
			}
			
			icon = {
				position = { 90 11 }
				framesize = { 50 50 }
				size = { 28 28 }
				texture = "gfx/interface/icons/unit_actions/unit_naming.dds"
				frame = "[SingleUnitWindow.GetUnitNameIconFrame]"
				visible = "[And(SingleUnitWindow.CanRenameUnit,SingleUnitWindow.HasCustomUnitName)]"
				tooltip = "[SingleUnitWindow.GetUnitNameIconTooltip]"
			}
			
			editbox = {
				position = { 120 6 }
				size = { 270 34 }
				name = "unit_name"
				using = MarbleButtonFontM
				text = "[SingleUnitWindow.GetSelectedUnit.GetName]"
				ontextchanged = "[SingleUnitWindow.RenameUnit]"
				focuspolicy = all
				alwaystransparent = no
				
				visible = "[SingleUnitWindow.CanRenameUnit]"
				multiline = no
				
				tooltip = "UNIT_NAME_TT"
			}
			
			textbox = {
				position = { 120 6 }
				size = { 270 34 }
				using = MarbleButtonFontM
				text = "[SingleUnitWindow.GetSelectedUnit.GetName]"
				focuspolicy = all
				alwaystransparent = no
				visible = "[Not(SingleUnitWindow.CanRenameUnit)]"
				multiline = no
				tooltip = "UNIT_NAME_NON_EDIT_TT"
			}
			
			textbox = {
				position = { 494 14 }
				autoresize = yes
				using = MarbleButtonFontS
				text = "[SingleUnitWindow.GetSelectedUnit.GetLocation.GetName]"
				tooltip = UNIT_LOCATION_TT
				widgetanchor = top|right
			}
			
			container = {
				position = { 94 56 }
				
				icon = {
					name = "moral_bar_frame"
					texture = "gfx/interface/unit_view/moral_frame.dds"
				}
				
				progressbar = {
					using = unit_view_moral_bar_green
					value = "[FixedPointToFloat(SingleUnitWindow.GetSelectedUnit.GetMoralePercent)]"
					tooltip = [SingleUnitWindow.GetSelectedUnit.GetMoraleTooltip]
				}
			}
			
			icon = {
				texture = "gfx/interface/unit_view/army_hidden_icon.dds"
				position = { 68 12 }
				visible = "[Not(SingleUnitWindow.GetSelectedUnit.IsVisibleToAi)]"
				tooltip = [SingleUnitWindow.GetSelectedUnit.GetIsVisibleToAiTooltip]
			}
			
			icon = {
				texture = "gfx/interface/unit_view/army_visible_icon.dds"
				position = { 64 12 }
				visible = [SingleUnitWindow.GetSelectedUnit.IsVisibleToAi]
				tooltip = [SingleUnitWindow.GetSelectedUnit.GetIsVisibleToAiTooltip]
			}
			
			widget = {
				position = { 468 52 }
				size = { 60 120 }
				vbox = {
					button = {
						size = { 40 40 }
						texture = "gfx/interface/buttons/button_square_40.dds"
						tooltip = "COMBAT_TACTIC_BUTTON"
						onclick = "[SingleUnitWindow.OnPickTactic]"
						clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_sub_tab"
						oversound = "event:/SFX/UI/Generic/sfx_ui_generic_mouse_over"
						enabled = [SingleUnitWindow.CanPickTactic]
						icon = {
							texture = "[GetCombatTacticIcon(SingleUnitWindow.GetSelectedUnit.GetTactic.GetIcon)]"
							position = { 2 2 }
							alwaystransparent = yes
							size = { 36 36 }
						}
					
					}
					
					dynamicgridbox = {
						name = "objective_buttons"
						flipdirection = yes
						datamodel_wrap = 3
						datamodel = "[SingleUnitWindow.GetObjectiveItems]"
						item = {
							using = unit_action_item
						}
					}
				
				
				}
			}
		}
		
		flowcontainer = {
			direction = horizontal
			position = { 112 51 }
			# First Row: Reorg!
			dynamicgridbox = {
				name = "reorg_buttons"
				flipdirection = yes
				datamodel_wrap = 2
				datamodel = "[SingleUnitWindow.GetReorganisationItems]"
				item = {
					using = unit_action_item_diamond
				}
			}
			
			widget = {
				size = { 19 0 }
				icon = {
					position = { 6 0 }
					texture = "gfx/interface/tiles/vertical_divider.dds"
					spriteType = corneredtiled
					spriteborder = { 0 10 }
					size = { 6 120 }
				}
			}
			
			#Second Row: Actions
			dynamicgridbox = {
				name = "action_buttons"
				flipdirection = yes
				datamodel_wrap = 4
				datamodel = "[SingleUnitWindow.GetActionItems]"
				item = {
					using = unit_action_item
				}
			}
			
			widget = {
				size = { 19 0 }
				icon = {
					position = { 7 0 }
					texture = "gfx/interface/tiles/vertical_divider.dds"
					spriteType = corneredtiled
					spriteborder = { 0 10 }
					size = { 6 120 }
				}
			}
			
			#Third Row: Toggle
			dynamicgridbox = {
				name = "toggle_buttons"
				flipdirection = yes
				datamodel_wrap = 2
				datamodel = "[SingleUnitWindow.GetToggleItems]"
				item = {
					using = unit_action_item_round
				}
			}
		}
		
		# STATUS INDICATIOTORS!
		container = {
			position = { 16 176 }
			
			icon = {
				texture = "gfx/interface/tiles/list_slot_corner_tiles.dds"
				spriteType = Corneredtiled
				spriteborder = { 10 10 }
				size = { 508 118 }
				shaderfile = "gfx/FX/pdxgui_default.shader"
				position = { 0 3 }
			}
			
			button = {
				gfxtype = framedbuttongfx
				effectname = "NoHighlight"
				texture = "gfx/interface/buttons/button_unit_types_all.dds"
				visible = "[SingleUnitWindow.IsShowAll]"
				onclick = "[SingleUnitWindow.ToggleShowAll]"
				clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_click"
				oversound = "event:/SFX/UI/Generic/sfx_ui_generic_mouse_over"
				tooltip = SHOW_ALL_UNIT_TYPES
				position = { 14 5 }
				framesize = { 45 45 }
				upframe = 1
				overframe = 2
				downframe = 3
			}
			
			button = {
				gfxtype = framedbuttongfx
				effectname = "NoHighlight"
				texture = "gfx/interface/buttons/button_unit_types_in.dds"
				visible = "[Not(SingleUnitWindow.IsShowAll)]"
				onclick = "[SingleUnitWindow.ToggleShowAll]"
				clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_click"
				oversound = "event:/SFX/UI/Generic/sfx_ui_generic_mouse_over"
				position = { 14 8 }
				framesize = { 45 45 }
				tooltip = SHOW_ONLY_UNIT_TYPES
				upframe = 1
				overframe = 2
				downframe = 3
			}
			
			icon = {
				texture = "gfx/interface/tiles/list_slot_corner_tiles.dds"
				spriteType = Corneredtiled
				position = { 5 55 }
				spriteborder = { 10 10 }
				size = { 64 28 }
				shaderfile = "gfx/FX/pdxgui_default.shader"
			}
			
			icon = {
				alpha = "[TransparentIfZero(SingleUnitWindow.GetSelectedUnit.GetAttrition)]"
				texture = "gfx/interface/tiles/list_slot_corner_tiles.dds"
				spriteType = Corneredtiled
				position = { 5 86 }
				spriteborder = { 10 10 }
				size = { 64 28 }
				shaderfile = "gfx/FX/pdxgui_default.shader"
			}
			
			textbox = {
				position = { 37 54 }
				autoresize = yes
				using = MarbleButtonFont
				text = "[SingleUnitWindow.GetSelectedUnit.GetVisualStrength]"
				tooltip = "[SingleUnitWindow.GetSelectedUnit.GetStrengthTooltip]"
				widgetanchor = top|hcenter
			}
			
			container = {
				position = { 3 87 }
				parentanchor = top|left
				tooltip = [SingleUnitWindow.GetSelectedUnit.GetAttritionTooltip]
				alpha = "[TransparentIfZero(SingleUnitWindow.GetSelectedUnit.GetAttrition)]"
				icon = {
					using = icon_attrition
					size = { 26 26 }
					position = { 3 0 }
				}
				
				textbox = {
					position = { 45 -2 }
					autoresize = yes
					using = MarbleButtonFont
					text = "[SingleUnitWindow.GetSelectedUnit.GetAttrition|1]%"
					widgetanchor = top|hcenter
				}
			}

			container = {
				position = { 72 8 }
				
				visible = "[SingleUnitWindow.GetSelectedUnit.IsArmy]"
				tooltip = "[SingleUnitWindow.GetSelectedUnit.GetFoodSupplyInformation]"
				
				icon = { 
					name = "food_bar_frame"
					position = { 10 2 }
					spriteborder = { 1 5 }
					size = { 11 76 }
					texture = "gfx/interface/tiles/morale_progress_bar_frame.dds"
					spriteType = Corneredtiled
					
					progressbar = {
						name = "foodbar"
						position = { 3 2 }
						size = { 7 72 }
						visible = "[SingleUnitWindow.GetSelectedUnit.CanGetFoodFromLocation]"
						using = progressbar_green_vertical
						value = "[SingleUnitWindow.GetSelectedUnit.GetFoodPercentage]"
					}
					progressbar = {
						name = "foodbar_negative"
						position = { 3 2 }
						size = { 7 72 }
						visible = "[Not(SingleUnitWindow.GetSelectedUnit.CanGetFoodFromLocation)]"
						using = progressbar_red_vertical
						value = "[SingleUnitWindow.GetSelectedUnit.GetFoodPercentage]"
					}
				}
				
				icon = {
					position = { 2 82 }
					size = { 28 28 }
					texture = "gfx/interface/icons/shared_icons/food_capacity.dds"
				} 
			}
			
			
			overlappingitembox = {
				using = UnitCards
				name = "unit_types_grid"
				position = { 100 8 }
				size = { 404 120 }
				datamodel = "[SingleUnitWindow.GetSubUnitCounts]"
			}
		}
	}
	
	flowcontainer = {
		parentanchor = top|right
		widgetanchor = top|right
		position = { -100 300 }
		ignoreinvisible = yes
		
		icon = {
			texture = "gfx/interface/icons/shared_icons/exiles.dds"
			size = { 32 32 }
			visible = "[SingleUnitWindow.GetSelectedUnit.IsExiled]"
			tooltip = "[SingleUnitWindow.GetExileTooltip]"
		}
		
		icon = {
			texture = "gfx/interface/icons/shared_icons/retreating.dds"
			size = { 32 32 }
			visible = "[SingleUnitWindow.GetSelectedUnit.IsRetreating]"
			tooltip = UNIT_RETREAT_TT
		}
	}
	
	margin_widget = {
		size = { 80 40 }
		position = { -18 300 }
		margin = { 8 8 }
		
		parentanchor = top|right
		widgetanchor = top|right
		
		background = {
			texture = "gfx/interface/tiles/list_slot_corner_tiles.dds"
			spriteType = Corneredtiled
			spriteborder = { 10 10 }
			shaderfile = "gfx/FX/pdxgui_default.shader"
		}
		
		overlappingitembox = {
			datamodel = "[SingleUnitWindow.GetSelectedUnit.GetTemporaryModifiers]"
			position = { 0 -4 }
			size = { 65 30 }
			spacing = 5
			
			item = {
				modifier_icon = {
					datacontext = "[TimedModifier.GetModifier]"
					tooltip = "[TimedModifier.GetTooltip]"
				}
			}
		}
	}
	
	margin_widget = {
		size = { 80 40 }
		position = { 17 300 }
		margin = { 8 8 }
		
		background = {
			texture = "gfx/interface/tiles/list_slot_corner_tiles.dds"
			spriteType = Corneredtiled
			spriteborder = { 10 10 }
			shaderfile = "gfx/FX/pdxgui_default.shader"
		}
		
		textbox = {
			autoresize = yes
			using = MarbleButtonFont
			text = "[SingleUnitWindow.GetMaintenance|2]@gold"
			tooltip = "MAINTENANCE_UNIT"
			parentanchor = center
			align = hcenter|nobaseline
		}
	}
	
	margin_widget = {
		visible = yes
		
		position = { 100 300 }
		size = { 180 40 }
		margin = { 8 2 }
		
		parentanchor = top|left
		widgetanchor = top|left
		
		background = {
			texture = "gfx/interface/tiles/list_slot_corner_tiles.dds"
			spriteType = Corneredtiled
			spriteborder = { 10 10 }
			shaderfile = "gfx/FX/pdxgui_default.shader"
		}
		
		dynamicgridbox = {
			size = { 120 200 }
			flipdirection = yes
			datamodel = "[SingleUnitWindow.GetPreferredUnitItems]"
			
			item = {
				
				
				widget = {
					size = { 38 32 }
					
					button = {
						position = { 0 1 }
						size = { 34 34 }
						texture = "gfx/interface/buttons/button_square_42.dds"
					#	align = center|nobaseline
						parentanchor = top|left
						clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_close"
						oversound = "event:/SFX/UI/Generic/sfx_ui_generic_mouse_over"
						onclick = "[PreferredUnitItem.OnClick]"
						enabled = "[PreferredUnitItem.CanClick]"
						tooltip = "[PreferredUnitItem.GetTooltip]"
		
						icon = {
							position = { 3 2 }
							size = { 28 28 }
							texture = "[GetSubUnitIcon(PreferredUnitItem.GetType.GetType)]"
						}
					}
				}
				

			}
		}
		
		button = {
			position = { 128 1 }
			texture = "gfx/interface/buttons/button_square_42.dds"
			tooltip = "[SingleUnitWindow.GetFlankTooltip]"
			enabled = "[SingleUnitWindow.CanToggleFlankSize]"
			onclick = [SingleUnitWindow.ToggleFlankSize]
			size = { 34 34 }
			
			oversound = "event:/SFX/UI/Generic/sfx_ui_generic_mouse_over"
			clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_click"
			
			textbox = {
				parentanchor = center
				size = { 30 30 }
				position = { 0 2 }
				align = center|nobaseline
				alwaystransparent = yes
				using = MarbleButtonFontL
				text = "[SingleUnitWindow.GetSelectedUnit.GetDesiredFlankSize]"
			}
		}
	}
	
	margin_widget = {
		visible = "[SingleUnitWindow.GetSelectedUnit.HasLeader]"
		position = { 280 300 }
		size = { 80 40 }
		margin = { 2 2 }
		parentanchor = top|left
		widgetanchor = top|left
		tooltip = "[SingleUnitWindow.GetSelectedUnit.GetCommander.GetLoyaltyGainToolTip]"
		
		background = {
			texture = "gfx/interface/tiles/list_slot_corner_tiles.dds"
			spriteType = Corneredtiled
			spriteborder = { 10 10 }
			shaderfile = "gfx/FX/pdxgui_default.shader"
		}
		
		icon = {
			texture = "gfx/interface/icons/modifiers/loyalty_gain_chance.dds"
			size = { 32 32 }
			position = { 2 3 }
		}
		
		textbox = {
			position = { 30 0 }
			size = { 30 30 }
			alwaystransparent = yes
			using = MarbleButtonFont
			text = "[SingleUnitWindow.GetSelectedUnit.GetCommander.GetLoyaltyGainChanceValue|2%]"
		}
	}
	
	margin_widget = {
		visible = "[SingleUnitWindow.GetSelectedUnit.HasLeader]"
		position = { 360 300 }
		size = { 70 40 }
		margin = { 2 2 }
		parentanchor = top|left
		widgetanchor = top|left
		tooltip = "[SingleUnitWindow.GetSelectedUnit.GetEnslavementEffiencyTooltip]"
		
		background = {
			texture = "gfx/interface/tiles/list_slot_corner_tiles.dds"
			spriteType = Corneredtiled
			spriteborder = { 10 10 }
			shaderfile = "gfx/FX/pdxgui_default.shader"
		}
		
		icon = {
			texture = "gfx/interface/icons/modifiers/enslavement_efficiency.dds"
			size = { 32 32 }
			position = { 2 3 }
		}
		
		textbox = {
			position = { 36 0 }
			size = { 30 30 }
			alwaystransparent = yes
			using = MarbleButtonFont
			text = "[SingleUnitWindow.GetSelectedUnit.GetEnslavementEffiencyUI|0%]"
		}
	}
	
	###########################################################
	# Show Subunits
	###########################################################
	
	icon = {
		texture = "gfx/interface/tiles/list_slot_corner_tiles.dds"
		position = { 16 344 }
		spriteType = Corneredtiled
		spriteborder = { 10 10 }
		size = { 508 396 }
		shaderfile = "gfx/FX/pdxgui_default.shader"
	}
	
	scrollarea = {
		position = { 20 350 }
		size = { 494 384 }
		scrollbarpolicy_horizontal = always_off
		
		scrollbar_vertical = {
			using = MarbleScrollBar
		}
		
		scrollwidget = {
			dynamicgridbox = {
				name = "subunits_grid"
				size = { 380 200 }
				
				datamodel = "[SingleUnitWindow.GetSelectedUnit.GetSubUnits]"
				
				item = {
					widget = {
						size = { 484 64 }
						
						icon = {
							texture = "gfx/interface/unit_view/unit_background.dds"
							visible = "[SubUnit.IsRegular]"
							tooltip = "[SubUnit.GetCategoryDescription]"
						}
						icon = {
							texture = "gfx/interface/unit_view/unit_background_merc.dds"
							tooltip = "[SubUnit.GetCategoryDescription]"
							visible = "[SubUnit.IsMercenary]"
						}
						
						
						icon = {
							texture = "gfx/interface/unit_view/unit_background_migration.dds"
							visible = "[SubUnit.IsMigration]"
							tooltip = "[SubUnit.GetCategoryDescription]"
						}
						
						
						icon = {
							texture = "gfx/interface/unit_view/unit_background_clan.dds"
							visible = "[SubUnit.IsClanRetinue]"
							tooltip = "[SubUnit.GetCategoryDescription]"
						}
						
						
						icon = {
							position = { 14 -3 }
							texture = "gfx/interface/unit_view/unit_card_square.dds"
						
						}
						
						icon = {
							position = { 48 29 }
							size = { 57 57 }
							texture = "[GetSubUnitIcon(SubUnit.GetType)]"
							tooltip = "[SubUnit.GetTypeDescription]"
							widgetanchor = vcenter|hcenter
						}
						
						textbox = {
							position = { 102 5 }
							autoresize = yes
							using = GoldenFontL
							text = "[SubUnit.GetName]"
							tooltip = "[SubUnit.GetDescription]"
						}
						
						textbox = {
							position = { 102 29 }
							autoresize = yes
							using = GoldenFontS
							text = "[SubUnit.GetTypeName]"
							tooltip = "[SubUnit.GetTypeDescription]"
						}
						
						button = {
							using = icon_loyalty
							visible = "[SubUnit.HasPersonalLoyalty]"
							tooltip = "[SubUnit.GetLoyaltyInformation]"
							onclick = "[DefaultOnCharacterClick( SubUnit.GetPersonalLoyalty.GetID )]"
							clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_sub_tab"
							oversound = "event:/SFX/UI/Generic/sfx_ui_generic_mouse_over"
							size = { 28 28 }
							position = { 440 6 }
						}
						
						icon = {
							texture = "gfx/interface/unit_view/experience_frame.dds"
							position = { 76 6 }
						}
						
						progressbar = {
							using = unit_view_experience_bar
							position = { 81 10 }
							value = "[FixedPointToFloat(SubUnit.GetExperience)]"
							tooltip = "[SubUnit.GetExperienceInfo]"
						}
						
						icon = {
							texture = "gfx/interface/unit_view/experience_frame.dds"
							position = { 86 6 }
						}
						
						progressbar = {
							using = unit_view_morale_bar
							position = { 91 10 }
							value = "[FixedPointToFloat(SubUnit.GetMoralePercent)]"
							tooltip = "[SubUnit.GetMoraleInfo]"
						}
						
						textbox = {
							position = { -24 29 }
							autoresize = yes
							using = GoldenFontS
							parentanchor = top|right
							text = "[SubUnit.GetStrength]"
							tooltip = "[SubUnit.GetStrengthDescription]"
						
						}
					
					}
				}
			}
		}
	}
}

